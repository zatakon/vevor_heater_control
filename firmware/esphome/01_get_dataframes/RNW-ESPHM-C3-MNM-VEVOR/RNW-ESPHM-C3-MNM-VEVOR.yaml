external_components:
  - source: ../components

substitutions:
  id_name: rnw_esphm_c3_01_workshop_heater
  friendly_name: esp32c3-workshop-heater
  update_wifi: 60s
  update_uptime: 60s
  pin_a0: GPIO0
  pin_a1: GPIO1
  pin_a2: GPIO2
  pin_a3: GPIO3
  pin_batt_v: GPIO4
  pin_i2c_scl: GPIO8
  pin_i2c_sda: GPIO7
  pin_d6: GPIO6
  pin_d10: GPIO0
  pin_d18: GPIO8
  pin_btn_pwr: GPIO0
  pin_vin: GPIO1
  pin_chrg_sence: GPIO5
  pin_chrg_state: GPIO9

  # VOLTAGE BATTERY
  batt_capacity_table_size: "11"
  batt_voltage_max: "4.2"
  batt_voltage_min: "3.2"
  batt_r1: "150.0"
  batt_r2: "200.0"
  batt_v: "4.2"

  # VOLTAGE IN
  vin_r1: "200.0"
  vin_r2: "10.0"

esphome:
  name: ${friendly_name}
  friendly_name: ${friendly_name}

esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: arduino

# Enable logging
logger:
  level: DEBUG  # Optional: Set to DEBUG for detailed logs
  baud_rate: 115200
  hardware_uart: UART0

# Enable Home Assistant API
api:
  encryption:
    key: "ww8hNF2Tq7ShF52H5nS4QyEm6+PtV9Alv0DTMEVJv+w="

ota:
  - platform: esphome
    password: "5d88ade2ef43066eeff6d5b1497bbc11"

wifi:
  ssid: M_AP
  password: aidajekrasna

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${friendly_name}"
    password: "IDbWG7CaLYjw"

captive_portal:

deep_sleep:
  id: deep_sleep_1

i2c:
  id: i2c_0
  scan: false
  sda: ${pin_i2c_sda}
  scl: ${pin_i2c_scl}
  frequency: 400kHz 

uart:
  - id: logger_serial
    tx_pin: GPIO21
    rx_pin: GPIO20
    baud_rate: 115200
  - id: heater_serial
    rx_pin: 
      # number: ${pin_a1}
      number: ${pin_a2}
      # mode: INPUT_PULLUP
      inverted: true
    baud_rate: 4800
    # invert: true

vevorheater:
  id: vevor_heater
  uart_id: heater_serial

# binary_sensor:
#   - platform: gpio
#     id: ${id_name}_a0
#     pin:
#       number: ${pin_a0}
#       mode: INPUT
#   - platform: gpio
#     id: ${id_name}_a1
#     pin:
#       number: ${pin_a1}
#       mode: INPUT
#   - platform: gpio
#     id: ${id_name}_a3
#     pin:
#       number: ${pin_a3}
#       mode: INPUT

# sensor:
  # # BATTERY VOLTAGE
  # - platform: template
  #   name: "${friendly_name} Battery capacity"
  #   id: ${id_name}_batt_capacity_sensor
  #   update_interval: 1s
  #   lambda: |-
  #     uint8_t batt_capacity_table[${batt_capacity_table_size}] = {100, 94, 85, 76, 66, 54, 26, 12, 5, 2, 0};
  #     float voltage = id(${id_name}_batt_voltage_sensor).state;
  #     float capacity = 0.0;
  #     if(voltage >= ${batt_voltage_max}) {
  #       capacity = 100;
  #     } else if(voltage <= ${batt_voltage_min}) {
  #         capacity = 0;
  #     } else {
  #         uint8_t lookUpTablePosition = uint8_t((${batt_voltage_max} - voltage)*10);
  #         uint16_t x0 = uint16_t(voltage*10) * 100;
  #         uint16_t x1 = x0 + 100;
  #         uint16_t x = uint16_t(voltage*1000);
  #         capacity = (batt_capacity_table[lookUpTablePosition+1]*(x1-x) + batt_capacity_table[lookUpTablePosition]*(x-x0)) / (100);
  #     }
  #     return capacity;

  # - platform: adc
  #   name: "${friendly_name}: Battery Voltage"
  #   id: ${id_name}_batt_voltage_sensor
  #   pin: ${pin_batt_v}
  #   attenuation: 12db
  #   update_interval: 1s
  #   filters:
  #     - lambda: |-
  #         return x * ((${batt_r1} + ${batt_r2}) / ${batt_r2});

  # # WIFI SIGNAL
  # - platform: wifi_signal
  #   name: "${friendly_name}: WiFi Signal Sensor"
  #   id: ${id_name}_wifi_signal
  #   update_interval: ${update_wifi}
  
  # # UPTIME
  # - platform: uptime
  #   name: "${friendly_name}: Uptime Sensor"
  #   id: ${id_name}_uptime_sensor
  #   update_interval: ${update_uptime}
  #   on_raw_value:
  #     then:
  #       - text_sensor.template.publish:
  #           id: ${id_name}_uptime_human
  #           state: !lambda |-
  #             int seconds = round(id(${id_name}_uptime_sensor).raw_state);
  #             int days = seconds / (24 * 3600);
  #             seconds = seconds % (24 * 3600);
  #             int hours = seconds / 3600;
  #             seconds = seconds % 3600;
  #             int minutes = seconds /  60;
  #             seconds = seconds % 60;
  #             return (
  #               (days ? to_string(days) + "d " : "") +
  #               (hours ? to_string(hours) + "h " : "") +
  #               (minutes ? to_string(minutes) + "m " : "") +
  #               (to_string(seconds) + "s")
  #             ).c_str();

# text_sensor:
  # UPTIME HUMAN READABLE
  # - platform: template
  #   name: "${friendly_name}: uptime"
  #   id: ${id_name}_uptime_human
  #   icon: mdi:clock-start

  # # WIFI INFO
  # - platform: wifi_info
  #   ip_address:
  #     name: "${friendly_name}: IP Address"
  #     id: ${id_name}_ip_address_sensor
  #   ssid:
  #     name: "${friendly_name}: SSID"
  #     id: ${id_name}_ssid_sensor
  #   bssid:
  #     name: "${friendly_name}: BSSID"
  #     id: ${id_name}_bssid_sensor
  #   mac_address:
  #     name: "${friendly_name}: MAC Address"
  #     id: ${id_name}_mac_address_sensor

  # # ESP VERSION
  # - platform: version
  #   name: "${friendly_name}: ESPHome Version"
  #   id: ${id_name}_esphome_version_sensor

# button:
  # # DEEP SLEEP
  # - platform: template
  #   name: "${friendly_name}: Go to deep sleep"
  #   id: ${id_name}_go_to_deep_sleep
  #   on_press:
  #     then:
  #       - deep_sleep.enter:
  #           id: deep_sleep_1
  #           sleep_duration: 20s
